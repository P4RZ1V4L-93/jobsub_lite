#!/bin/env python
# $Id$

import getopt, sys, os, datetime, commands, pprint, subprocess
from groupsettings import *


        
    
def iterArgs():
    output = None
    experiment_env=os.environ.get("GROUP")
    if experiment_env == "e938" or experiment_env == "minerva":
        job_settings = MinervaSettings()
    elif experiment_env == "nova":
        job_settings = NovaSettings()
    elif experiment_env == "lbne":
        job_settings = LbneSettings()
    elif experiment_env == "e875" or experiment_env == "minos":
        job_settings = MinosSettings()
    else:
        job_settings = JobSettings()
        
##     if (len(sys.argv) == 1 or sys.argv[1]=='-h' or sys.argv[1]=='--help'):
##         job_settings.print_usage()
##         sys.exit(2)

##     settings = job_settings.settings
##     i = 1
##     j = len(sys.argv)-1
##     if(j<1):
##         job_settings.parseArgs(i,i)
        
##     while( i < j) and ( sys.argv[i].find("-")==0):
##     	#print 'i=',i,' sys.argv=', sys.argv[i], ' j= ',j    
##         o = sys.argv[i]
##         if i+1<j:
##             a = sys.argv[i+1]
##         else:
##             a=o
        
##         argshift = job_settings.parseArgs(o,a)
##         i=i+argshift
## 	#print 'after i=',i, 'sys.argv=',sys.argv[i]

##     #print "rest of array is ",sys.argv[i:]
##     settings['exe_script'] = sys.argv[i]
##     settings['script_args'] = sys.argv[i+1:]

##     if settings['verbose']:
##         print "exe_script = ",settings['exe_script']
##         print "script_args = ", settings['script_args']
##     #sys.exit(0)
##    job_settings = JobSettings()
    job_settings.runParser()
    #print job_settings.settings['requirements']
    
    #job_settings.parse()
    #job_settings.settings = dict(old_settings.items() + new_settings.items() )
    #print "================================================================="
    #print job_settings.settings['requirements']
    #print old_settings['requirements']
    #print new_settings['requirements']

    return job_settings



def doSubmit(settings):
    print 'submitting....'
    #env_vars = settings['environment'].split(';')
    #print "doSubmit: env vars=",settings['added_environment']
    exports = ""
    for x in settings['added_environment']:
	#if x.find("$ENV(")>0:
        #(var,val) = x.split('=')
        var=x
        val = os.environ.get(var)
        if val is not None:
	    if settings['ups_shell']=="csh":
		exports = exports+"""setenv %s '%s'; """%(var,val)
	    else:
            	exports = exports+"""export %s="%s";""" %(var,val)
		 
    cmd = ""

    if settings['dataset_definition']=="":
        cmd = "%s cd /tmp; /usr/bin/sg %s '/opt/condor/bin/condor_submit %s'"%(exports,settings['storage_group'],settings['cmdfile'])
    else:
        cmd = "%s cd /tmp; /usr/bin/sg %s 'PATH=/opt/condor/bin:$PATH; condor_submit_dag %s'"%(exports,settings['storage_group'],settings['dagfile'])
      

    
    if settings['submit_host'] != settings['local_host']:
        cmd = "ssh -akx %s \"%s\"" % (settings['submit_host'],cmd)
    if settings['verbose']:
        print "doSubmit: executing %s " % cmd
        
    (retVal,output)=commands.getstatusoutput(cmd)
    print output
    if retVal != 0:
        print "%s returned status %s " % (cmd,retVal)
        print "if you need help with the above errors send mail to"
        print "ifront-computing@fnal.gov"

 
    
if __name__ == "__main__":

    try:
       settings = iterArgs()
    except Exception, e:
       print str(e)
       sys.exit(1)
    settings.checkSanity()
    settings.makeCondorFiles()
    if settings.settings['verbose']==True:
       pp = pprint.PrettyPrinter(indent=4)
       pp.pprint(settings.settings)

    if settings.settings['submit']:
        doSubmit(settings.settings)

