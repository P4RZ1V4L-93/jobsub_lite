#!/bin/env python
# $Id$

import  sys, os, commands, pprint
from groupsettings import JobSettings, MinervaSettings, NovaSettings
from groupsettings import CdfSettings, LbneSettings, MinosSettings



def motd():
        
    #motd_file = "/grid/fermiapp/common/jobsub_MOTD/MOTD"
    motd_filename = settings.settings["motd_file"]
    #downtime_file = "/grid/fermiapp/common/jobsub_MOTD/JOBSUB_UNAVAILABLE"
    downtime_filename = settings.settings["downtime_file"]
    if os.path.isfile(motd_filename):
        motd_file = open(motd_filename)
        print motd_file.read()
        motd_file.close()

    if os.path.isfile(downtime_filename):
        dtf = open(downtime_filename)
        print dtf.read()
        dtf.close()
        sys.exit(0)
    
def iterArgs():
    
    experiment_env = os.environ.get("GROUP")
    if experiment_env == "e938" or experiment_env == "minerva":
        job_settings = MinervaSettings()
    elif experiment_env == "nova":
        job_settings = NovaSettings()
    elif experiment_env == "lbne":
        job_settings = LbneSettings()
    elif experiment_env == "e875" or experiment_env == "minos":
        job_settings = MinosSettings()
    elif experiment_env == "cdf" or experiment_env == "cdf":
        job_settings = CdfSettings()
    else:
        job_settings = JobSettings()

    #print "job_settings class is %s"%job_settings.__class__.__name__
        
    job_settings.runCmdParser()

    return job_settings



def doSubmit(settings):
    print 'submitting....'
    #env_vars = settings['environment'].split(';')
    #print "doSubmit: env vars=",settings['added_environment']
    exports = ""
    for x in settings['added_environment']:
        #if x.find("$ENV(")>0:
        #(var,val) = x.split('=')
        var = x
        val = os.environ.get(var)
        if val is not None:
            if settings['ups_shell'] == "csh":
                exports = exports+"""setenv %s '%s'; """%(var,val)
            else:
                exports = exports+"""export %s="%s";""" %(var,val)
    cmd = ""


    if settings['usedagman'] == False:
        cmd = "cd %s ; condor_submit %s"%(settings['condor_tmp'], settings['cmdfile'])
    else:
        append = """-append "+Owner=\\"%s\\"" -append "+AccountingGroup=\\"group_%s.%s\\"" """%\
                (settings['user'],settings['group'],settings['user'])
        if settings.has_key('maxConcurrent'):
            maxjobs = settings['maxConcurrent']
        else:
            maxjobs = 2000
        cmd = "cd %s; condor_submit_dag -dont_suppress_notification -maxidle %s -maxjobs %s %s %s"%\
                (settings['condor_tmp'], settings['job_count'], maxjobs, append, settings['dagfile'])
      

    
    if settings['submit_host'] != settings['local_host']:
        cmd = "ssh -akx %s \"%s\"" % (settings['submit_host'], cmd)
    if settings['verbose']:
        print "doSubmit: executing %s " % cmd
        
    (retVal,output) = commands.getstatusoutput(cmd)
    print output
    if retVal != 0:
        retVal=retVal%256
        if retVal == 0:
            retVal = 1
        print "%s returned status %s " % (cmd, retVal)
        print "additional output: %s " % (output)
        print "if you need help with the above errors "
        print "please open a service desk ticket"
    sys.exit(retVal)
 
    
if __name__ == "__main__":

    try:
        settings = iterArgs()
    except Exception, e:
        print str(e)
        sys.exit(1)
    settings.checkSanity()
    settings.makeCondorFiles()
    if settings.settings['verbose'] == True:
        pp = pprint.PrettyPrinter(indent=4)
        pp.pprint(settings.settings)

    if settings.settings['submit']:
        motd()
        doSubmit(settings.settings)

