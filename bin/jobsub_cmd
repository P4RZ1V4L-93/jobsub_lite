#!/usr/bin/python3 -I

#
# jobsub_cmd -- generic wrapper for condor commands
# COPYRIGHT 2022 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys

class StoreGroupinEnvironment(argparse.Action):
    """Action to store the given group in the GROUP environment variable"""

    def __call__(self, parser, namespace, values, option_string=None):
        os.environ["GROUP"] = values
        setattr(namespace, self.dest, values)


def backquote(cmd):
    sp = subprocess.Popen(cmd, shell=True, encoding='UTF-8', stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    res, stderr = sp.communicate()
    return res

def main():
    parser = argparse.ArgumentParser(description = 'Condor command wrapper')
    parser.add_argument(
        "-G",
        "--group",
        help="Group/Experiment/Subgroup for priorities and accounting",
        action=StoreGroupinEnvironment,
    )
    parser.add_argument('passthru', nargs='+', action='append' )


    arglist=parser.parse_args()

    # make list of arguments to pass to condor command:
    # - the passthru arguments from above, except if we have
    #   any 234@schedd style arguments, pick out the schedd and
    #   keep the 234, and pass --name schedd as well
    execargs = []
    schedd = None
    for i in arglist.passthru[0]:
        pos = i.find('@')
        if pos >= 0:
            schedd = i[pos+1:]
            i = i[0:pos]
        execargs.append(i)

    if schedd:
        execargs.insert(0, schedd)
        execargs.insert(0, "-name")

    # also make sure we have suitable credentials...
    os.environ['X509_USER_PROXY'] = backquote('fake_ifdh getProxy')
    os.environ['BEARER_TOKEN_FILE'] = backquote('fake_ifdh getToken')

    # and find the wrapped command name
    cmd = os.path.basename(sys.argv[0]).replace('jobsub_','condor_')

    execargs.insert(0, cmd)
    
    # now run the command with those arguments
    os.execvp("/usr/bin/"+cmd, execargs)

if __name__ == "__main__":
    main()
