#!/usr/bin/env python3

import os
import os.path
import sys
import re
import glob
import requests
import subprocess
import datetime
import uuid
import hashlib
import socket

#
# we are in prefix/bin/jobsub_submit, so find our prefix
#
PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#
# find parts we need in package management
# this means we don't need fancy ups dependencies..
#
sys.path.append(os.path.join(PREFIX,"lib"))
from packages import pkg_find
pkg_find("ifdhc","-q python36")
pkg_find("ifdhc_config")
pkg_find("jinja")
import jinja2 as jinja
import ifdh

#
# import our local parts
#
from get_parser import get_parser 
from condor import  get_schedd, submit, submit_dag
from dagnabbit import parse_dagnabbit
from creds import get_creds
from tarfiles import do_tarballs

def render_files(srcdir, values, dest):
    """ use jinja to render the templates from srcdir into the dest directory
        using values dict for substitutions
    """
    print("trying to render files from %s\n" % srcdir)
    jinja_env = jinja.Environment(loader=jinja.FileSystemLoader(srcdir))
    flist = glob.glob("%s/*" % srcdir)

    # add destination dir to values for template
    values["cwd"] = dest

    for f in flist:
        print("rendering: %s" % f)
        bf = os.path.basename(f)
        ff = os.path.join(dest, bf)
        of = open(ff, "w")
        of.write(jinja_env.get_template(bf).render(**values))
        of.close()
        if ff.endswith(".sh"):
            os.chmod(ff, 0o755)

def cleanup(tmp):
    """ cleanup /tmp etc. """
    print("remember to clean up %s" % tmp)
    # os.system("rm -rf %s" % tmp)


def get_principal():
    """ get our kerberos principal name """
    princ = None
    if sys.version_info.major >= 3:
        enc = {'encoding': 'UTF-8'}
    else:
        enc = {}
    p = subprocess.Popen(["/usr/bin/klist"], stdout=subprocess.PIPE, **enc)
    line = p.stdout.readline()
    line = p.stdout.readline()
    princ = line[line.find(":") + 2 : -1]
    p.stdout.close()
    p.wait()
    return princ

def fixquote(s):
    parts = s.split("=",1)
    if len(parts) == 2:
        return '%s="%s"' % (parts[0],parts[1])
    else:
        return s

def set_extras_n_fix_units(args, schedd_name):
    """ add items to our args dictionary that are not given on the
        command line, but that are needed to render the condor submit
        file templates.  Also convert units on memory, disk, and times
    """
    args["outbase"] = "/home/gcounpriv/mengel/scratch"
    args["user"] = os.environ["USER"]
    args["schedd"] = schedd_name
    ai = socket.getaddrinfo(socket.gethostname(), 80)
    if ai:
        args["ipaddr"] = ai[-1][-1][0]
    else:
        args["ipaddr"] = "unknown"
    args["jobsub_version"] = "lite_v1_0"
    args["kerberos_principal"] = get_principal()
    args["usage_model"] = "ONSITE"
    args["uid"] = str(os.getuid())
    args["uuid"] = str(uuid.uuid4())
    args["date"] = datetime.datetime.now().strftime("%Y_%m_%d_%H%M%S")
    print("executable: %s" % repr(args["executable"]))
    print("exe_arguments: %s" % repr(args["exe_arguments"]))
    if not args["executable"] and args["exe_arguments"]:
        args["executable"] = args["exe_arguments"][-1]
        args["exe_arguments"] = args["exe_arguments"][:-1]
    print("executable: %s" % repr(args["executable"]))
    print("exe_arguments: %s" % repr(args["exe_arguments"]))
    args["full_executable"] = args["executable"].replace("file://", "")
    if args["full_executable"][0] != "/":
        args["full_executable"] = os.path.join(os.getcwd(), args["full_executable"])
    args["executable_basename"] = os.path.basename(args["full_executable"])
    args["resource_provides_quoted"] = [fixquote(x) for x in args["resource_provides"]]

    args["outdir"]="%(outbase)s/%(group)s/%(user)s/%(date)s.%(uuid)s" % args
    args["submitdir"] = args["outdir"]
    #
    # conversion factors for memory suffixes
    #
    dsktable = {"k": 1, "m": 1024, "g": 1024 * 1024, "t": 1024 * 1024 * 1024}
    memtable = {"k": 1.0 / 1024, "m": 1, "g": 1024, "t": 1024 * 1024}
    timtable = {"s": 1, "m": 60, "h": 60 * 60, "d": 60 * 60 * 24}

    fix_unit(args, "disk", dsktable, -1, "b", -2)
    fix_unit(args, "memory", memtable, -1, "b", -2)
    fix_unit(args, "expected_lifetime", timtable, -1, "smhd", -1)
    fix_unit(args, "timeout", timtable, -1, "smhd", -1)
    for e in args["environment"]:
        pos = e.find("=")
        if pos < 0:
            v = os.environ.get(e,None)
            if not v:
                raise RuntimeError("--environment %s was given but no value was in the environment")
            e = "%s=%s" % (e,v) 

def fix_unit(args, name, table, s_offset, s_list, c_offset):
    """ unit conversions using appropriate conversion table
    """
    #print("fix_unit: %s %s %s %d %s %d" % (name, args[name], repr(table),s_offset,s_list,c_offset))
    if args[name] and args[name][s_offset].lower() in s_list:
        cf = table[args[name][c_offset].lower()]
        args[name] = float(args[name][:c_offset]) * cf
        #print("converted to %f" % args[name])
    elif args[name]:
        args[name] = float(args[name])

def do_dataset_defaults(varg):

    # see if we have --environment SAM_PROJECT=
    have_project = False
    for e in varg["environment"]:
        pos = e.find("=")
        if e[:pos] == "SAM_PROJECT":
            have_project = True

    if not have_project:
        # if not, grab from the environment, or use dataset_$uuid
        varg["environment"].append("SAM_PROJECT=%s" % 
                 os.environ.get("SAM_PROJECT",
                                "%s_%s" % (varg["dataset_definition"], 
                                           varg["uuid"])))

def main():
    parser = get_parser()
    args = parser.parse_args()

    get_creds()
    do_tarballs(args)

    varg = vars(args)
    schedd_add = get_schedd(varg)
    schedd_name = schedd_add.eval("Machine")
    set_extras_n_fix_units(varg, schedd_name)
    os.makedirs(varg["outdir"])
    submitdir=varg["outdir"]
    if args.dag:
        d = os.path.join(PREFIX, 'templates','dag')
        parse_dagnabbit(d, varg, submitdir, schedd_name)
        submit_dag(os.path.join(submitdir,'*.dag'),varg,schedd_add)
    elif args.dataset_definition:
        do_dataset_defaults(varg)
        d = os.path.join(PREFIX, 'templates','dataset_dag')
        render_files(d, varg, submitdir)
        submit_dag(os.path.join(submitdir,'*.dag'),varg,schedd_add)
    elif args.maxConcurrent:
        d = os.path.join(PREFIX, 'templates','maxconcurrent_dag')
        render_files(d, varg, submitdir)
        submit_dag(os.path.join(submitdir,'*.dag'),varg,schedd_add)
    else:
        d = "%s/templates/simple" % PREFIX
        render_files(d, varg, submitdir)
        submit(os.path.join(submitdir, "*.cmd"),varg,schedd_add)

if __name__ == "__main__":
    main()
