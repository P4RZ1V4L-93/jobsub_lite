#!/usr/bin/env python3

#
# jobsub_submit -- wrapper for condor_submit
# COPYRIGHT 2021 FERMI NATIONAL ACCELERATOR LABORATORY
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys

sys.path = [x for x in sys.path if x[:6] == "/usr/l"]

import os
import os.path
import re
import glob
import requests
import subprocess
import datetime
import uuid
import socket
import shutil

#
# we are in prefix/bin/jobsub_submit, so find our prefix
#
PREFIX = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#
# find parts we need in package management
# this means we don't need fancy ups dependencies..
#
sys.path.append(os.path.join(PREFIX, "lib"))
from packages import pkg_find

pkg_find("jinja")
import jinja2 as jinja

#
# import our local parts
#
from get_parser import get_parser
from condor import get_schedd, submit, submit_dag
from dagnabbit import parse_dagnabbit
from creds import get_creds
from tarfiles import do_tarballs
from utils import fixquote, set_extras_n_fix_units



def main():
    """script mainline:
    - parse args
    - get credentials
    - handle tarfile options
    - set added values from environment, etc.
    - convert/render template files to submission files
    - launch
    """
    parser = get_parser()
    args = parser.parse_args()


    proxy, token = get_creds()
    if args.verbose:
        print("proxy is : %s" % proxy)
        print("token is : %s" % token)

    os.environ["GROUP"] = "fermilab"

    do_tarballs(args)

#    varg = vars(args)
#    if args.debug:
#        sys.stderr.write("varg: %s" % repr(varg))
#    schedd_add = get_schedd(varg)
#    schedd_name = schedd_add.eval("Machine")
#    set_extras_n_fix_units(varg, schedd_name, proxy, token)
#    submitdir = varg["outdir"]
    
#    d = "%s/templates/simple" % PREFIX
#        render_files(d, varg, submitdir)
#         schedd_args = "-remote %s" %(schedd_name)
#        if not varg.get("no_submit",False):
#            os.chdir(varg["submitdir"])
#            submit(os.path.join(submitdir, "*.cmd"), varg, schedd_args)


if __name__ == "__main__":
    main()
