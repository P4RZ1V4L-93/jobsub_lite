#!/usr/bin/env python

##########################################################################
# Project:
#   JobSub
#
# Author:
#   Dennis Box
#
# Description:
#   This module implements jobsub_client calls to condor_prio, adjusting
#   job priority
#
##########################################################################

from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals
from __future__ import division
from future import standard_library
standard_library.install_aliases()
import sys
import os
import argparse 
import traceback

import logSupport
from jobsubClient import JobSubClient
from jobsubClient import JobSubClientError
from jobsubClient import Version_String 
from jobsubClient import http_code_to_rc
from jobsubClient import JID_Callback 
from defaultServer import defaultServer


def print_opts(options):
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)


def required_args_present(options):
    """
    check if optargs contains a legal set of arguments
    to run a jobsub_prio command
    """
    try:
        if options.uid:
            print("\n\nthe --user option has been disabled, adjust jobs individually")
            return False
        if options.acctGroup and options.jobsubServer and options.prio and\
            options.jobId:
            # have to disable options.uid for now
            # (options.jobId or options.uid):
            return True
    except AttributeError:
        return False
    return False


def parse_opts(argv):
    """
    use argparse to digest input arguments
    """
    usage = '%(prog)%s [Client Options]'
    usage += "\nadjust job priorities of queued jobs"
    epi_text = """REQUIRED arguments to adjust job priorities  are (-G AND --prio AND  """
    epi_text += """--jobid .  \nPlease direct questions, """
    epi_text += """comments, or problems to the service desk.  """
    epi_text += "For help on --jobid or see "
    epi_text += """https://cdcvs.fnal.gov/redmine/projects/jobsub/"""
    epi_text += """wiki/Frequently_Asked_Questions"""

    parser = argparse.ArgumentParser(usage=usage,
                                   # version=version_string(),
                                   conflict_handler="resolve",
                                   epilog=epi_text)

    client_options = parser.add_argument_group(parser, "Client Options")

    # Required args
    client_options.add_argument('-G', '--group',
                         dest='acctGroup',
                         type=str,
                         action='store',
                         metavar='<Group/Experiment/Subgroup>',
                         default=os.environ.get('JOBSUB_GROUP'),
                         help="".join(['Group/Experiment/Subgroup ',
                                       'for priorities and accounting',
                                       ]))

    # Optional args
    client_options.add_argument('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')

    client_options.add_argument('--role',
                         dest='acctRole',
                         type=str,
                         action='store',
                         metavar='<VOMS Role>',
                         default=None,
                         help='VOMS Role for priorities and accounting')

    client_options.add_argument('--jobid',
                         dest='jobId',
                         type=str,
                         action=JID_Callback,
                         default=None,
                         metavar='<Job ID>',
                         help="".join(['CSV list of Job Ids to adjust prio for.  Job ',
                                       'Ids have format of ',
                                       '(cluster).(process)@(schedd_name). ',
                                       'If Job id has a decimal point but no ',
                                       'process ',
                                       '(example) 1234.@fifebatch.fnal.gov ',
                                       'then ALL job ids with that cluster ',
                                       'and schedd name will be removed',
                                       ]))
    client_options.add_argument('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help="".join(['Print debug messages including ',
                                       'server contacted, http response, ',
                                       'response time',
                                       ]))

    client_options.add_argument('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')

    #commenting this out for now, we don't know what to do about
    #group superusers affecting other groups priorities en masse
    client_options.add_argument('--user',
                         dest='uid',
                         type=str,
                         action='store',
                         default=None,
                         metavar='<user ID>',
                         help='****DISABLED****adjust prio of all jobs with this uid ')

    client_options.add_argument('--prio',
                                dest='prio',
                                type=str,
                                action='store',
                                default=None,
                                metavar='<priority>',
                                help='change job priority to this number. Default ' +
                               'is 0, higher numbers correspond to higher ' +
                               'priority')

    client_options.add_argument('--version', action=Version_String)


    if len(argv) < 1:
        print("ERROR: Insufficient arguments specified")
        parser.print_help()
        sys.exit(1)

    options, remainder = parser.parse_known_args(argv)

    if options.help or (len(remainder) > 1):
        parser.print_help()
        sys.exit(0)

    if not required_args_present(options):
        print("\nERROR: Missing required arguments\n")
        parser.print_help()
        sys.exit(1)
    return options


def main(argv):
    options = parse_opts(argv)
    extraOpts = {'debug': options.debug, 'prio': options.prio}
    logSupport.init_logging(options.debug)
    logSupport.dprint('CLIENT_ARGS: ', vars(options))
    js_client = JobSubClient(options.jobsubServer, options.acctGroup,
                             options.acctRole, None, extra_opts=extraOpts)

    rc = 1
    try:
        tmp_rc = 0

        if options.jobId:
            for jid in options.jobId.split(','):
                trc = 0
                http_code = js_client.adjust_prio(jid,
                                                  uid=options.uid)
                if isinstance(http_code, list):
                    for code in http_code:
                        trc += http_code_to_rc(code)
                    tmp_rc += trc
                else:
                    tmp_rc += http_code_to_rc(http_code)
                if trc == 0:
                    print('\n\npriority adjustment for job %s to %s succeeded' % (jid, extraOpts['prio']))
                else:
                    print('\n\npriority adjustment for job %s to %s failed' % (jid, extraOpts['prio']))
            rc = tmp_rc
        else:  # the options to execute this branch are temporarily commented out
            if options.uid:
                print('adjusting prio of  jobs owned by %s' % options.uid)
            http_code_list = js_client.adjust_prio(uid=options.uid)
            for http_code in http_code_list:
                tmp_rc = http_code_to_rc(http_code)
                if tmp_rc == 0:
                    rc = tmp_rc

    except JobSubClientError as e:
        print(e)
        logSupport.dprint(traceback.format_exc())
    except Exception as e:
        print(e)
        logSupport.dprint('%s' % traceback.print_exc())
    return rc


if __name__ == '__main__':
    sys.exit(main(sys.argv))
