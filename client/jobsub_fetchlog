#!/usr/bin/env python

import sys
import argparse
import pycurl
import time
import os
import errno
import zipfile
import tarfile
import shutil
import traceback
import subprocessSupport
import re

import logSupport
import constants
from defaultServer import defaultServer
from jobsubClient import JobSubClient
from jobsubClient import get_client_credentials
from jobsubClient import print_formatted_response
#from jobsubClient import version_string
from jobsubClient import Version_String
from jobsubClient import print_json_response
from jobsubClient import servicing_jobsub_server
from jobsubClient import curl_secure_context
from jobsubClient import JobSubClientError
from jobsubClient import http_code_to_rc
#from jobsubClient import jid_callback
from jobsubClient import JID_Callback
from jobsubClient import check_id


def required_args_present(options):
    try:
        if (options.acctGroup and options.jobsubServer and options.jobId) or (
                options.jobsubServer and options.list):
            return True
    except AttributeError:
        return False
    return False


def parse_opts(argv):
    parser = argparse.ArgumentParser(usage='%(prog)s [options]',
                                   # version=version_string(),
                                   conflict_handler="resolve",
                                   epilog="REQUIRED arguments are: ( (--group  AND --jobid) OR (--list) ) . Please direct questions, comments, or problems to the service desk.")

    # Required args
    parser.add_argument('-G', '--group',
                      dest='acctGroup',
                      type=str,
                      action='store',
                      metavar='<Group/Experiment/Subgroup>',
                      default=os.environ.get('JOBSUB_GROUP'),
                      help='Group/Experiment/Subgroup for priorities and accounting')

    parser.add_argument('-J', '--job', '--jobid',
                      dest='jobId',
                      type=str,
#                      action='callback',
                      action=JID_Callback,
#                      callback=jid_callback,
                      metavar='<Job ID>',
                      help='Job ID')

    # Optional args
    parser.add_argument('--jobsub-server',
                      dest='jobsubServer',
                      action='store',
                      metavar='<JobSub Server>',
                      default=defaultServer(),
                      help='Alternate location of JobSub server to use')

    parser.add_argument('--timeout',
                      dest='timeout',
                      type=int,
                      action='store',
                      metavar='<Timeout>',
                      default=None,
                      help='Timeout for the operation in sec')

    parser.add_argument('--dest-dir', '--unzipdir', '--destdir',
                      dest='destdir',
                      type=str,
                      action='store',
                      metavar='<Dest Dir>',
                      default=None,
                      help='Directory to automatically unarchive logs into')

    parser.add_argument('--role',
                      dest='acctRole',
                      type=str,
                      action='store',
                      metavar='<VOMS Role>',
                      default=None,
                      help='VOMS Role for priorities and accounting')

    parser.add_argument('--user',
                      dest='user',
                      type=str,
                      action='store',
                      metavar='<user>',
                      default=None,
                      help='VOMS Role for priorities and accounting')

    parser.add_argument('--archive-format',
                      dest='format',
                      type=str,
                      action='store',
                      metavar='<Archive Format>',
                      default='tar',
                      help='format for downloaded archive:"tar" (default,compressed) or "zip"')

    parser.add_argument('--partial',
                      dest='partial',
                      action='store_true',
                      # metavar='<partial>',
                      default=False,
                      help='download only the stdout and stderr for this jobid, not the entire sandbox')

    parser.add_argument('--list-sandboxes', '--list',
                      dest='list',
                      action='store_true',
                      # metavar='<List Sandboxes and creation dates>',
                      default=False,
                      help='List all available sandboxes and creation date for given user/group.  If no group specified, list available sandboxes for all groups. ')

    parser.add_argument('--debug',
                      dest='debug',
                      action='store_true',
                      # metavar='<debug info>',
                      default=False,
                      help='show debug info like server contacted, http response, response time')

    parser.add_argument('--version',
                       action=Version_String)

    if len(argv) < 1:
        print "ERROR: Insufficient arguments specified"
        parser.print_help()
        sys.exit(1)

    options, remainder = parser.parse_known_args(argv)

    if len(remainder) > 1:
        # parser.print_help(file)
        parser.print_help()

    if not required_args_present(options):
        print "ERROR: Missing required arguments"
        print "%s" % parser.epilog
        parser.print_help()
        sys.exit(1)

    if options.jobId:
        check_id(options.jobId)

    return options


def checkDestDir(destDir):
    if not destDir:
        return
    try:
        os.makedirs(destDir)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise


def list_sandboxes(options):

    creds = get_client_credentials(
        acctGroup=options.acctGroup, server=options.jobsubServer)
    cert = creds['cert']
    cmd = "openssl x509 -in %s -noout -subject" % cert
    cmd_out, cmd_err = subprocessSupport.iexe_cmd(cmd)
    if options.user:
        user = options.user
    else:
        userlist = re.findall('^.*/CN=UID:(.*$)', cmd_out)
        if len(userlist) > 0 and len(userlist[0]) > 0:
            user1 = userlist[0]
            user = user1.split('/')[0]
        else:
            user = os.environ.get('USER')

    client = JobSubClient(options.jobsubServer, options.acctGroup, options.acctRole, [
    ], extra_opts={'debug': options.debug})

    client.probeSchedds()
    rc = 0
    rc_err = 0
    rc_arr = []
    for server in client.schedd_list:
        if "https:" not in server:
            server = "https://%s" % server
        port = str(client.serverPort)
        if port not in server:
            server = "%s:%s" % (server, port)
        if options.acctRole is not None:
            submitURL = constants.JOBSUB_JOB_LIST_SANDBOXES_URL_PATTERN_WITH_ROLE % \
                (server, options.acctGroup, options.acctRole, user)
        else:
            submitURL = constants.JOBSUB_JOB_LIST_SANDBOXES_URL_PATTERN % (
                server, options.acctGroup, user)
        http_code = client.changeJobState(submitURL, 'GET',
                                          ssl_verifyhost=False)
        rc = http_code_to_rc(http_code)
        rc_arr.append(rc)

        if options.debug:
            print('CREDENTIALS    : %s\n' % creds)
            print('ACTION URL     : %s\n' % submitURL)
    if 0 in rc_arr:
        return 0
    return 1


def get_sandbox(options):
    creds = get_client_credentials(
        acctGroup=options.acctGroup, server=options.jobsubServer)
    if options.jobId.find('@') > 0:
        tokens = options.jobId.split('@')
        job = tokens[0]
        mach = tokens[-1:][0]
        options.jobsubServer = "https://%s:8443" % mach

    if options.acctRole is not None:
        sandboxURL = constants.JOBSUB_JOB_SANDBOX_URL_PATTERN_WITH_ROLE % (
            options.jobsubServer, options.acctGroup,
            options.acctRole, options.jobId)
    else:
        sandboxURL = constants.JOBSUB_JOB_SANDBOX_URL_PATTERN % (
            options.jobsubServer, options.acctGroup, options.jobId)

    if options.partial:
        sandboxURL = "%spartial/" % sandboxURL
    if options.format == 'zip':
        sandboxURL = "%s?archive_format=zip" % (sandboxURL)

    if options.debug:
        print('CREDENTIALS    : %s\n' % creds)
        print('ACTION URL     : %s\n' % sandboxURL)

    try:
        checkDestDir(options.destdir)
    except:
        print 'Error creating output directory'
        print traceback.format_exc()
        return 1

    if options.format == 'zip':
        fn = '%s.zip' % options.jobId
    else:
        fn = '%s.tgz' % options.jobId

    fp = open(fn, 'w')
    # Create curl object and set curl options to use
    curl, response = curl_secure_context(sandboxURL, creds)
    curl.setopt(curl.WRITEFUNCTION, fp.write)
    curl.setopt(curl.SSL_VERIFYHOST, 0)
    timeout = constants.JOBSUB_PYCURL_TIMEOUT
    if options.timeout:
        timeout = options.timeout
    curl.setopt(curl.TIMEOUT, timeout)
    curl.setopt(curl.HTTPHEADER,
                ['Accept: application/x-download,application/json'])

    response_code = 200
    response_time = 0
    try:
        stime = time.time()
        curl.perform()
        etime = time.time()
        response_time = etime - stime
        response_code = curl.getinfo(pycurl.RESPONSE_CODE)
        response_content_type = curl.getinfo(pycurl.CONTENT_TYPE)
    except pycurl.error as error:
        errno, errstr = error
        response_code = curl.getinfo(pycurl.RESPONSE_CODE)
        err = "HTTP response:%s PyCurl Error %s: %s" % (response_code,
                                                        errno, errstr)
        if errno == 60:
            err += "\nDid you remember to include the port number to "
            err += "your server specification \n( --jobsub-server %s )?" % options.jobsubServer
        print(traceback.format_exc())
        raise JobSubClientError(err)

    serving_server = servicing_jobsub_server(curl)
    curl.close()
    response.close()
    fp.close()

    sandbox_extract_rc = 0
    try:
        value = None
        if response_code == 200:
            print 'Downloaded to %s' % fn
            if options.destdir is not None:
                print "Moved files to %s" % options.destdir
                if options.format == 'zip':
                    z = zipfile.ZipFile(fn)
                    z.extractall(options.destdir)
                    d = ''
                    for f in z.namelist():
                        b = os.path.basename(f)
                        s = os.path.join(options.destdir, f)
                        d = os.path.dirname(s)
                        t = os.path.join(options.destdir, b)
                        shutil.move(s, t)
                    os.rmdir(d)
                else:
                    t = tarfile.open(fn)
                    t.extractall(options.destdir)
                    t.close()
                os.remove(fn)
        else:
            with open(fn, 'r') as fp:
                value = fp.read()
            os.remove(fn)

        if response_content_type == 'application/json':
            print_json_response(value, response_code, options.jobsubServer,
                                serving_server, response_time,
                                suppress_server_details=False,
                                verbose=options.debug)
        else:
            print_formatted_response(value, response_code, options.jobsubServer,
                                     serving_server, response_time,
                                     suppress_server_details=False,
                                     print_msg_type=False,
                                     verbose=options.debug)
    except:
        print 'Error extracting the fetched files'
        sandbox_extract_rc = 1
        print traceback.format_exc()

    return http_code_to_rc(response_code) + sandbox_extract_rc


def main(argv):
    options = parse_opts(argv)
    if options.debug:
        print "CLIENT_ARGS: %s" % options
    if options.list:
        return list_sandboxes(options)
    else:
        return get_sandbox(options)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
