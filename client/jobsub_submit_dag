#!/usr/bin/env python

################################################################################
# Project:
#   JobSub
#
# Author:
#   Parag Mhashilkar
#
# Description:
#   This module implements the JobSub client tool
#
################################################################################

from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals
from __future__ import division
from future import standard_library
standard_library.install_aliases()
import sys
import os
import argparse
import traceback

import logSupport
from jobsubClient import JobSubClient
from jobsubClient import JobSubClientSubmissionError
from jobsubClient import Version_String
from jobsubClient import http_code_to_rc
from defaultServer import defaultServer


def required_args_present(options):
    try:
        if options.debug and options.jobid_output_only:
            print("ERROR: --debug and --jobid_output_only are incompatible")
            return False
        if options.use_cvmfs_dropbox and options.acctRole:
            if options.acctRole.lower() == 'mars':
                print ("jobs with --role mars are not allowed to use --use-cvmfs-dropbox")
                sys.exit(1)
        if (options.acctGroup and options.jobsubServer):
            return True
    except AttributeError:
        return False
    return False


def print_opts(options):
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)


def parse_opts(argv):
    usage = '%(prog)s [Client Options] [Server Options] file://user_script \n\nProvide --group and --jobsub-server to see full help'
    parser = argparse.ArgumentParser(usage=usage,
                                   add_help=False,
                                   conflict_handler="resolve",
                                   epilog="REQUIRED arguments are (--group AND file://[dag_description_file]).   Please direct questions,  comments, and problems to the service desk")

    client_options = parser.add_argument_group("Client Options")

    # Required args
    client_options.add_argument('-G', '--group',
                         dest='acctGroup',
                         type=str,
                         action='store',
                         default=os.environ.get('JOBSUB_GROUP'),
                         metavar='<Group/Experiment/Subgroup>',
                         help='Group/Experiment/Subgroup for priorities and accounting')

    # Optional args
    client_options.add_argument('--role',
                         dest='acctRole',
                         type=str,
                         action='store',
                         metavar='<VOMS Role>',
                         default=None,
                         help='VOMS Role for priorities and accounting')


    client_options.add_argument('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')

    client_options.add_argument('--dropbox-server',
                         dest='dropboxServer',
                         action='store',
                         metavar='<Dropbox Server>',
                         default=None,
                         help='Alternate location of Dropbox server to use')

    client_options.add_argument('--use-cvmfs-dropbox',
                         dest='use_cvmfs_dropbox',
                         default=False,
                         action='store_true',
                         help="use cvmfs for dropbox (default is pnfs)")

    client_options.add_argument('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help='Print debug messages including server contacted, http response, response time')

    client_options.add_argument('--jobid-output-only',
                         dest='jobid_output_only',
                         action='store_true',
                         default=False,
                         help='Return only jobsub jobid in response to a successful submission')

    client_options.add_argument('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')

    client_options.add_argument('--version',
                        action=Version_String)


    if len(argv) < 1:
        print("ERROR: Insufficient arguments specified")
        parser.print_help()
        sys.exit(1)


    options, srv_argv = parser.parse_known_args(argv)

    # ArgumentParser.parse_known_args will by default include the command
    # name - in this case jobsub_submit_dag.  Remove that from the server
    # args
    try:
        srv_argv.remove(argv[0])
    except ValueError:
        pass

    if not srv_argv:
        # No server side args or exe provided. Just print help.
        options.help = True

    if options.help:
        parser.print_help()
        if required_args_present(options):
            header = "  Server Options:"
            print('\n%s' % header)
            print_acctgroup_help(options)
        sys.exit(0)

    if not required_args_present(options):
        print("ERROR: Missing required arguments")
        print("%s" % parser.epilog)
        parser.print_help()
        sys.exit(1)
    return (options, srv_argv)


def print_acctgroup_help(options):
    """
    Format and print the help message from the server
    """

    js_client = JobSubClient(options.jobsubServer, options.acctGroup, None, [], extra_opts={})
    js_client.help('dag')



def main(argv):
    options, srv_argv = parse_opts(argv)
    logSupport.init_logging(options.debug)
    logSupport.dprint('SERVER_ARGS: ', srv_argv)
    logSupport.dprint('CLIENT_ARGS: ', vars(options))
    js_client = JobSubClient(options.jobsubServer, options.acctGroup,
                             options.acctRole, srv_argv,
                             options.dropboxServer, useDag=True,
                             extra_opts={'debug':options.debug,
                                         'jobid_output_only':options.jobid_output_only,
                                         'use_cvmfs_dropbox':options.use_cvmfs_dropbox})
    rc = 1
    try:
        http_code = js_client.submit_dag()
        rc = http_code_to_rc(http_code)
    except JobSubClientSubmissionError as e:
        print(e)
        logSupport.dprint(traceback.format_exc())
    except Exception as e:
        print(e)
        logSupport.dprint('%s' % traceback.print_exc())

    return rc


if __name__ == '__main__':
    sys.exit(main(sys.argv))

# TO TEST RUN SOMETHING LIKE THE FOLLOWING

# X509_CERT_DIR=/Users/parag/.globus/certificates X509_USER_CERT=/Users/parag/.globus/x509up_u11017 X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --group nova --jobsub-server https://fermicloud326.fnal.gov:8443 -g -N 3 --site Fermicloud-MultiSlots parag_test.sh --job-args 100

### Following are old examples
# X509_CERT_DIR=/Users/parag/.globus/certificates X509_USER_CERT=/Users/parag/.globus/x509up_u11017 X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --acct-group 1 --jobsub-server https://fermicloud326.fnal.gov:8443 --job-exe parag_test.sh --job-args 100 --jobsub-server-args -g -N 3 --site Fermicloud-MultiSlots
#X509_CERT_DIR=/Users/parag/.globus/certificates X509_USER_CERT=/Users/parag/.globus/x509up_u11017 X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --acct-group 1 --jobsub-server https://fermicloud326.fnal.gov:8443 --jobsub-server-args -g -N 3 --site Fermicloud-MultiSlots --X509_USER_PROXY=/scratch/proxies/dbox/dbox.nova.proxy /scratch/app/users/condor-exec/dbox/test_grid_env.sh 100
