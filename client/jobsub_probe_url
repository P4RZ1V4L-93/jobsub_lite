#!/usr/bin/env python
"""
##########################################################################
# Module:
#   jobsub_probe_url
#
# Project:
#   JobSub
#
# Author:
#   Dennis Box
#
# Description:
#   This program sends a single url to a jobsub server and prints out
#   its response.  Useful for development and debugging
#
##########################################################################
"""
import sys
import os
import optparse
import traceback
import logSupport
from jobsubClient import JobSubClient
from jobsubClient import JobSubClientError
from jobsubClient import version_string
from jobsubClient import http_code_to_rc
from defaultServer import defaultServer


def print_opts(options):
    """
    print out options from optarg
    """
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)




def parse_opts(argv):
    """ Set up optparse object and epilog message
    """
    usage = '%prog [Client Options]'
    epi_text = "Please direct questions, comments, or problems to the "
    epi_text += "service desk. "
    epi_text += "For help on --jobid or --constraint see "
    epi_text += """https://cdcvs.fnal.gov/redmine/projects/jobsub/"""
    epi_text += """wiki/Frequently_Asked_Questions"""
    parser = optparse.OptionParser(usage=usage,
                                   version=version_string(),
                                   conflict_handler="resolve",
                                   epilog=epi_text)

    opt_group = optparse.OptionGroup(parser, "Client Options")

    # Optional args
    opt_group.add_option('-G', '--group',
                         dest='acctGroup',
                         type='string',
                         action='store',
                         metavar='<Group/Experiment/Subgroup>',
                         default=os.environ.get('JOBSUB_GROUP'),
                         help="".join(['Group/Experiment/Subgroup ',
                                       'for priorities and accounting',
                                      ]))

    opt_group.add_option('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')


    opt_group.add_option('--endpoint',
                         dest='endpoint',
                         action='store',
                         help='REST API ENDPOINT')

    opt_group.add_option('--post-data',
                         dest='post_data',
                         action='store',
                         default=None,
                         help='post_data')

    opt_group.add_option('--action',
                         dest='action',
                         action='store',
                         help='HTTP ACTION (GET, etc)')

    opt_group.add_option('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')

    opt_group.add_option('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help='debug')
    parser.add_option_group(opt_group)

    if len(argv) < 1:
        print "ERROR: Insufficient arguments specified"
        parser.print_help()
        sys.exit(1)

    options, remainder = parser.parse_args(argv)

    if options.help or (len(remainder) > 1):
        parser.print_help()
        sys.exit(0)

    return options


def main(argv):
    """
    the pain and gain stems mainly from this main()
    """
    options = parse_opts(argv)
    logSupport.init_logging(options.debug)
    logSupport.dprint('CLIENT_ARGS: ', options)
    rcd = 1

    optDict = {'debug':options.debug,
               'action':options.action,
               'endpoint':options.endpoint
              }

    js_client = JobSubClient(options.jobsubServer,
                             options.acctGroup,
                             None,
                             [],
                             extra_opts=optDict)
    try:

        url = "%s/%s/" %(js_client.server, options.endpoint)
        post_data = None
        if options.post_data:
            post_data = eval(options.post_data)
        http_code = js_client.changeJobState(url,
                                             options.action,
                                             post_data, False)
        rcd = http_code_to_rc(http_code)
    except JobSubClientError as err:
        print err
        logSupport.dprint(traceback.format_exc())
    except Exception as err:
        print err
        logSupport.dprint('%s' % traceback.print_exc())

    return rcd


if __name__ == '__main__':
    sys.exit(main(sys.argv))
