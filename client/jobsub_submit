#!/usr/bin/env python

##########################################################################
# Project:
#   JobSub
#
# Author:
#   Parag Mhashilkar
#
# Description:
#   This module implements the JobSub client tool
#
##########################################################################

from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals
from __future__ import division
from builtins import open
from future import standard_library
standard_library.install_aliases()
from builtins import str
import sys
import os
import getopt
import optparse
import argparse
import time
import traceback
import json

from . import constants
from . import logSupport
from .jobsubClient import JobSubClient
from .jobsubClient import JobSubClientSubmissionError
# from jobsubClient import version_string
from .jobsubClient import Version_String
from .jobsubClient import http_code_to_rc
from .jobsubClient import get_jobexe_idx
from .defaultServer import defaultServer

#def split_client_server_args(parser, argv):
#    # NOTE: We need to correctly distinguish jobsub client's args from
#    #       from that of the user exe if they have same name.
#    #
#    # For example:
#    # jobsub_submit --group minerva file://test.sh --group nova one two --debug
#    # Client args: --group minerva
#    # Server/User args: file://test.sh --group nova one two --debug
#    #
#    # To make the distinction:
#    # STEP 1 : (a) Split client args and server args
#    #          (b) Identify the user exe in server args and its position
#    #          (c) Identify the user exe's position in original argv list
#    # STEP 2 : Any common args that appear after user exe are considered as
#    #          server args and removed from the client args list
#
#    cli_argv = [argv[0]]
#    srv_argv = []
#
#    # Loop through all the command line args
#    i = 1
#    while (i < len(sys.argv)):
#
#        # Check if this is defined as a client option in the parser
#        opt = parser.get_option(argv[i])
#
#        if opt:
#            # Option is defined as a client option in the parser
#            # This is a client option of form '--arg value' or '-a value'
#            cli_argv.append(argv[i])
#            if opt.action in optparse.Option.TYPED_ACTIONS:
#                try:
#                    cli_argv.append(argv[i + 1])
#                    i += 1
#                except IndexError:
#                    parser.error('%s option requires an argument' % argv[i])
#        elif '=' in argv[i]:
#            # This argument maybe of the form --arg=value
#            # Check if the arg splitter is '=' example --foo=bar
#            opt = parser.get_option(argv[i].split('=')[0])
#            if opt:
#                cli_argv.append(argv[i])
#            else:
#                srv_argv.append(argv[i])
#        else:
#            # We know nothing of this item. Assume server side option.
#            srv_argv.append(argv[i])
#
#        i += 1
#        # Check if we have jobexe by now
#        if get_jobexe_idx(srv_argv) is not None:
#            # We found the jobexe. Copy rest of the items in sys.argv
#            # to srv_argv and return. There should be no client args now.
#            srv_argv += argv[i:]
#            break
#
#    return (cli_argv, srv_argv)

def split_client_server_args(parser, argv):
    end_srv_argv = []
    working_argv = []

    # Find executable, make sure it and all arguments following are considered
    # server args
    exe_idx = get_jobexe_idx(argv)
    if exe_idx is not None:
        end_srv_argv = argv[exe_idx:]
        working_argv = argv[1:exe_idx] #Don't need to parse the jobsub command
    else:
        working_argv = argv[:]

    # Parse the known args of what's left to grab client arguments
    cli_argv, extras = parser.parse_known_args(working_argv)

    # Construct srv_argv
    srv_argv = extras + end_srv_argv

    return cli_argv, srv_argv

def required_args_present(options):
    try:
        if options.debug and options.jobid_output_only:
            print("ERROR: --debug and --jobid_output_only are incompatible")
            return False
        if (options.acctGroup and options.jobsubServer):
            return True
    except AttributeError:
        return False
    return False


def print_opts(options):
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)



def parse_opts(argv):
    usage = '%(prog)s [Client Options] [Server Options] file://user_script [user_script_args]\n\nProvide --group and --jobsub-server to see full help'
    parser = argparse.ArgumentParser(usage=usage,
                                   # version=version_string(), TODO
                                   add_help=False,
                                   conflict_handler="resolve",
                                   epilog="REQUIRED arguments are (--group AND  file://[your_grid_job_here]). Please direct questions, comments, or problems to the service desk")

    client_options = parser.add_argument_group('Client Options')

    # Required args
    client_options.add_argument('-G', '--group',
                         dest='acctGroup',
                         type=str,
                         action='store',
                         metavar='<Group/Experiment/Subgroup>',
                         default=os.environ.get('JOBSUB_GROUP'),
                         help='Group/Experiment/Subgroup for priorities and accounting')

    # Optional args
    client_options.add_argument('--role',
                         dest='acctRole',
                         type=str,
                         action='store',
                         metavar='<VOMS Role>',
                         default=None,
                         help='VOMS Role for priorities and accounting')

    client_options.add_argument('--dag',
                         dest='dag',
                         action='store_true',
                         default=False,
                         help='submit and run a dagNabbit input file')

    client_options.add_argument('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')

    client_options.add_argument('--dropbox-server',
                         dest='dropboxServer',
                         action='store',
                         metavar='<Dropbox Server>',
                         default=None,
                         help='Alternate location of Dropbox server to use')

    client_options.add_argument('--json-config',
                         dest='json_config',
                         action='store',
                         metavar='<JSON submit config file>',
                         default=None,
                         help='a JSON dict file of jobsub_submit options and values')

    client_options.add_argument('--tarball-exclusion-file',
                         dest='tarball_reject_list',
                         action='store',
                         metavar='<tarball exclusion regex file>',
                         default=None,
                         help="A file of python regex's to exclude from "+\
                              " tarballs. Use with --tar_file_name tardir://"+\
                              " Default exclusion list includes .git and .svn"+\
                              " directories, pdf, eps, log files, and human"+\
                              " readable images.  "+\
                              "\n")

    client_options.add_argument('--use-cvmfs-dropbox',
                         dest='use_cvmfs_dropbox',
                         default=False,
                         action='store_true',
                         help='use cvmfs for dropbox (default is pnfs)')

    client_options.add_argument('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help='Print debug messages including server contacted, http response, response time')

    client_options.add_argument('--jobid-output-only',
                         dest='jobid_output_only',
                         action='store_true',
                         default=False,
                         help='Return only jobsub jobid in response to a successful submission')

    client_options.add_argument('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')

    client_options.add_argument('--version',
                       action=Version_String)


    if len(argv) < 1:
        print("ERROR: Insufficient arguments specified")
        parser.print_help()
        sys.exit(1)
    
    # This bit is just for --json-config since it's treated differently than other args
    if argv.count("--json-config") > 1:
        JobSubClientSubmissionError("Only one json config file can be specified.") 


    # print('1 argv=%s' % argv)
    j = 0
    submit_config = ""
    while j < len(argv):
        if argv[j] == "--json-config":
            argv.pop(j)
            submit_config = argv.pop(j)
        elif "--json-config=" in argv[j]:
            arg=argv.pop(j)
            # pathological? case where '=' may be in name of json-config-file
            submit_config = "=".join(arg.split("=")[1:])
        j += 1


    if submit_config:
        classad_val = "--lines '+JOBSUB_JSON_CONFIG_FILE=\"%s\"'" % submit_config
        argv.insert(1, classad_val)
        fd = open(submit_config)
        sd = json.load(fd)
        fd.close()
        argv_job_idx = get_jobexe_idx(argv)
        if argv_job_idx is not None:
            argv_job_present = argv[argv_job_idx]
        else:
            argv_job_idx = len(argv)
            argv_job_present = False
        for opt in sd:
            if isinstance(opt,str):
                opt = str(opt)
            if opt[0] == "#":
                continue

            if sd.get(opt) and isinstance(sd[opt],str):
                sd[opt] = str(sd[opt])
            if str(sd[opt]).lower() == "true": 
                argv.insert(argv_job_idx, opt)
                argv_job_idx += 1
            elif "file://" in opt:
                if argv_job_present:
                    print("ERROR: you specified %s in %s" % (opt,submit_config))
                    print("and %s in the command line" % (argv_job_present))
                    print("these conflict, exiting")
                    exit(1)
                else:
                    argv.insert(argv_job_idx, opt)
                    if sd[opt]:
                        inc = 1
                        if isinstance(sd[opt], list):
                            for el in sd[opt]:
                                argv.insert(argv_job_idx+inc, str(el))
                                inc += 1
                        else:
                            argv.insert(argv_job_idx+inc, str(sd[opt]))


            elif isinstance(sd[opt], list):
                for lel in sd[opt]:
                    argv.insert(argv_job_idx, opt)
                    argv_job_idx += 1
                    argv.insert(argv_job_idx, lel)
                    argv_job_idx  += 1

            elif str(sd[opt]).lower() != "false":
                argv.insert(argv_job_idx, opt)
                argv_job_idx += 1
                argv.insert(argv_job_idx,str(sd[opt]))
                argv_job_idx  += 1

    cli_argv_namespace, srv_argv = split_client_server_args(parser, argv)

    # options, remainder = parser.parse_args(cli_argv)

    # if len(remainder) > 1:
    #     parser.print_help(file)

    if not srv_argv:
        # No server side args or exe provided. Just print help.
        cli_argv_namespace.help = True

    if cli_argv_namespace.help:
        parser.print_help()
        if required_args_present(cli_argv_namespace):
            header = "  Server Options:"
            print('\n%s' % header)
            print_acctgroup_help(cli_argv_namespace)
        sys.exit(0)

    if not required_args_present(cli_argv_namespace):
        print("ERROR: Missing required arguments")
        print("%s" % parser.epilog)
        parser.print_help()
        sys.exit(1)
    return (cli_argv_namespace, srv_argv)


def print_acctgroup_help(options):
    """
    Format and print the help message from the server
    """

    js_client = JobSubClient(options.jobsubServer, options.acctGroup, None, [
        ], extra_opts={})
    return js_client.help()

    # out = response

    # Remove the duplicate lines from the server response
    #    --help message
    #    Options:
    # for lineno in range(len(out)):
    #     if out[lineno].lstrip().startswith(
    #             '-h, --help') or (out[lineno].strip() == 'Options:'):
    #         out[lineno] = ''
    #         break
    # help_str = '  '.join(out[4:])
    # print help_str


def main(argv):
    options, srv_argv = parse_opts(argv)
    logSupport.init_logging(options.debug)
    logSupport.dprint('SERVER_ARGS: ', srv_argv)
    logSupport.dprint('CLIENT_ARGS: ', vars(options))
    js_client = JobSubClient(options.jobsubServer, options.acctGroup,
                             options.acctRole, srv_argv,
                             options.dropboxServer, options.dag, 
                             extra_opts={'debug': options.debug,
                                         'jobid_output_only':options.jobid_output_only,
                                         'tarball_reject_list':options.tarball_reject_list,
                                         'use_cvmfs_dropbox': options.use_cvmfs_dropbox,})
    rc = 1
    try:
        http_code = js_client.submit()
        rc = http_code_to_rc(http_code)
    except JobSubClientSubmissionError as e:
        print(e)
        logSupport.dprint(traceback.format_exc())
    except Exception as e:
        print(e)
        logSupport.dprint('%s' % traceback.print_exc())

    return rc


if __name__ == '__main__':
    sys.exit(main(sys.argv))

# TO TEST RUN SOMETHING LIKE THE FOLLOWING

# X509_CERT_DIR=/Users/parag/.globus/certificates
# X509_USER_CERT=/Users/parag/.globus/x509up_u11017
# X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --group
# nova --jobsub-server https://fermicloud326.fnal.gov:8443 -g -N 3 --site
# Fermicloud-MultiSlots parag_test.sh --job-args 100

# Following are old examples
# X509_CERT_DIR=/Users/parag/.globus/certificates X509_USER_CERT=/Users/parag/.globus/x509up_u11017 X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py --acct-group 1 --jobsub-server https://fermicloud326.fnal.gov:8443 --job-exe parag_test.sh --job-args 100 --jobsub-server-args -g -N 3 --site Fermicloud-MultiSlots
# X509_CERT_DIR=/Users/parag/.globus/certificates
# X509_USER_CERT=/Users/parag/.globus/x509up_u11017
# X509_USER_KEY=/Users/parag/.globus/x509up_u11017 ./jobsub.py
# --acct-group 1 --jobsub-server https://fermicloud326.fnal.gov:8443
# --jobsub-server-args -g -N 3 --site Fermicloud-MultiSlots
# --X509_USER_PROXY=/scratch/proxies/dbox/dbox.nova.proxy
# /scratch/app/users/condor-exec/dbox/test_grid_env.sh 100
