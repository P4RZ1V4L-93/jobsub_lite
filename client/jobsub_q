#!/usr/bin/env python

##########################################################################
# Project:
#   JobSub
#
# Author:
#   Parag Mhashilkar
#
# Description:
#   This module implements the JobSub client tool
#
##########################################################################

import sys
import os
import optparse
import traceback
import logSupport
from jobsubClient import JobSubClient
from jobsubClient import JobSubClientError
from jobsubClient import version_string
from jobsubClient import http_code_to_rc
from jobsubClient import jid_callback
from defaultServer import defaultServer


def print_opts(options):
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)


def required_args_present(options):
    try:
        if options.summary:
            if options.outFormat == 'long':
                err = 'ERROR: --summary and --long options conflict. '
                err += 'Choose one, not both.'
                print err
                return False

            if options.outFormat == 'dags':
                err = 'ERROR: --summary and --dag options conflict. '
                err += 'Choose one, not both.'
                print err
                return False

            if options.outFormat == 'hold':
                err = 'ERROR: --summary and --hold options conflict. '
                err += 'Choose one, not both.'
                print err
                return False

            if options.help or options.better_analyze or options.uid or \
                    options.jobId or options.acctRole:
                err = """ERROR: --summary conflicts with all of ( -better"""
                err += """-analyze, --user --jobid --role --dag --long)."""
                print err
                return False

        if options.better_analyze and not options.jobId:
            err =  """ERROR --better-analyze must be used with --jobid"""
            print err
            return False

        if options.jobsubServer:
            return True
    except AttributeError as e:
        print 'ERROR'
        print e
        return False
    return False


def parse_opts(argv):
    usage = '%prog [Client Options]'
    epi_text = "Please direct questions, comments, or problems to the "
    epi_text += "service desk. "
    epi_text += "For help on --jobid or --constraint see "
    epi_text += """https://cdcvs.fnal.gov/redmine/projects/jobsub/"""
    epi_text += """wiki/Frequently_Asked_Questions"""
    parser = optparse.OptionParser(usage=usage,
                                   version=version_string(),
                                   conflict_handler="resolve",
                                   epilog=epi_text)

    opt_group = optparse.OptionGroup(parser, "Client Options")

    # Optional args
    opt_group.add_option('-G', '--group',
                         dest='acctGroup',
                         type='string',
                         action='store',
                         metavar='<Group/Experiment/Subgroup>',
                         default=os.environ.get('JOBSUB_GROUP'),
                         help="".join(['Group/Experiment/Subgroup ',
                                       'for priorities and accounting',
                                      ]))

    opt_group.add_option('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')

    opt_group.add_option('--role',
                         dest='acctRole',
                         type='string',
                         action='store',
                         metavar='<VOMS Role>',
                         default=None,
                         help='VOMS Role for priorities and accounting')

    opt_group.add_option('--user',
                         dest='uid',
                         type='string',
                         action='store',
                         metavar='<user ID>',
                         default=None,
                         help='User Id  to query')

    opt_group.add_option('--jobid',
                         dest='jobId',
                         type='string',
                         action='callback',
                         callback=jid_callback,
                         metavar='<Job ID>',
                         default=None,
                         help="".join(['Job Ids to query.  Job ',
                                       'Ids have format of ',
                                       '(cluster).(process)@(schedd_name). ',
                                       'If Job id has a decimal point but no ',
                                       'process ',
                                       '(example) 1234.@fifebatch.fnal.gov ',
                                       'then ALL job ids with that cluster ',
                                       'and schedd name will be returned',
                                      ]))

    opt_group.add_option('--long',
                         dest='outFormat',
                         action='store_const',
                         const='long',
                         metavar='<output Format>',
                         default=None,
                         help='show long listing (like condor_q -l)')

    opt_group.add_option('--dag',
                         dest='outFormat',
                         action='store_const',
                         const='dags',
                         metavar='<output Format>',
                         default=None,
                         help='show dags (like condor_q -dag)')

    opt_group.add_option('--hold',
                         dest='outFormat',
                         action='store_const',
                         const='hold',
                         metavar='<output Format>',
                         default=None,
                         help='show held jobs (like condor_q -hold)')

    opt_group.add_option('--run',
                         dest='outFormat',
                         action='store_const',
                         const='run',
                         metavar='<output Format>',
                         default=None,
                         help='show running jobs (like condor_q -run)')

    opt_group.add_option('--idle',
                         dest='outFormat',
                         action='store_const',
                         const='idle',
                         metavar='<output Format>',
                         default=None,
                         help='show idle jobs ')

    opt_group.add_option('--constraint',
                         dest='constraint',
                         action='store',
                         type='string',
                         metavar='<constraint>',
                         default=None,
                         help='like condor_q -constraint <constraint>')

    opt_group.add_option('--summary',
                         dest='summary',
                         action='store_true',
                         default=False,
                         metavar='<summary>',
                         help='provide a summary (like ifront_q) ')

    opt_group.add_option('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help='Print debug messages to including server contacted, http response, response time')

    opt_group.add_option('--better-analyze',
                         dest='better_analyze',
                         action='store_true',
                         default=False,
                         help='do condor_q -better-analyze on job (must use with --jobid)')

    opt_group.add_option('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')

    parser.add_option_group(opt_group)

    if len(argv) < 1:
        print "ERROR: Insufficient arguments specified"
        parser.print_help()
        sys.exit(1)

    options, remainder = parser.parse_args(argv)

    if options.help or (len(remainder) > 1):
        parser.print_help()
        sys.exit(0)

    if not required_args_present(options):
        print "ERROR: Missing required arguments"
        print "%s" % parser.epilog
        parser.print_help()
        sys.exit(1)
    return options


def main(argv):
    options = parse_opts(argv)
    logSupport.init_logging(options.debug)
    logSupport.dprint('CLIENT_ARGS: ', options)
    rc = 1

    optDict = {'debug':options.debug,
               'better_analyze':options.better_analyze,
                'constraint':options.constraint,
                'uid': options.uid
              }

    js_client = JobSubClient(options.jobsubServer,
                             options.acctGroup,
                             None,
                             [],
                             extra_opts=optDict)
    try:

        if options.summary:
            http_code = js_client.summary()

        else:
            http_code = js_client.listJobs(options.jobId,
                                           options.uid,
                                           options.outFormat)
        rc = http_code_to_rc(http_code)
    except JobSubClientError as e:
        print e
        logSupport.dprint(traceback.format_exc())
    except Exception as e:
        print e
        logSupport.dprint('%s' % traceback.print_exc())

    return rc


if __name__ == '__main__':
    sys.exit(main(sys.argv))
