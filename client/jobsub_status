#!/usr/bin/env python

################################################################################
# Project:
#   JobSub
#
# Author:
#   Parag Mhashilkar
#
# Description:
#   This module implements the JobSub client tool
#
################################################################################

from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals
from __future__ import division
from future import standard_library
standard_library.install_aliases()
import sys
import os
import getopt
import argparse
import time
import traceback
import constants
import logSupport
from jobsubClient import JobSubClient
from jobsubClient import JobSubClientError
from jobsubClient import Version_String
from jobsubClient import http_code_to_rc
from defaultServer import defaultServer

def print_opts(options):
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)


def required_args_present(options):
    try:
        if options.jobsubServer and options.sites and options.acctGroup:
            return True
    except AttributeError:
        return False
    return False


def parse_opts(argv):
    usage = '%(prog)s [Client Options]'
    parser = argparse.ArgumentParser(usage=usage,
                                   conflict_handler="resolve",
                                   epilog="REQUIRED arguments are (--sites AND --group). Please direct questions, comments, or problems to the service desk")

    client_options = parser.add_argument_group("Client Options")

    # Optional args
    client_options.add_argument('-G', '--group',
                         dest='acctGroup',
                         type=str,
                         action='store',
                         metavar='<Group/Experiment/Subgroup>',
                         default=os.environ.get('JOBSUB_GROUP'),
                         help='Group/Experiment/Subgroup for priorities and accounting')

    client_options.add_argument('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')



    client_options.add_argument('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help='Print debug messages  including server contacted, http response, response time')

    client_options.add_argument('--sites',
                         dest='sites',
                         action='store_true',
                         default=False,
                         help="""query the server for sites that  'jobsub_submit --SITE=' is configured to submit to   """)


    client_options.add_argument('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')

    client_options.add_argument('--version',
                        action=Version_String)


    if len(argv) < 1:
        print("ERROR: Insufficient arguments specified")
        parser.print_help()
        sys.exit(1)

    options, remainder = parser.parse_known_args(argv)

    if options.help or (len(remainder) > 1):
        parser.print_help()
        sys.exit(0)

    if not required_args_present(options):
        print("ERROR: Missing required arguments")
        print("%s" % parser.epilog)
        parser.print_help()
        sys.exit(1)
    return options


def main(argv):
    options = parse_opts(argv)
    logSupport.init_logging(options.debug)
    logSupport.dprint('CLIENT_ARGS: ', vars(options))
    rc = 1
    js_client = JobSubClient(options.jobsubServer, options.acctGroup, None, [], extra_opts={'debug':options.debug})
    try:
        if options.sites:
            http_code=js_client.listConfiguredSites()
            rc = http_code_to_rc(http_code)
    except JobSubClientError as e:
        print(e)
        logSupport.dprint(traceback.format_exc())
    except Exception as e:
        print(e)
        logSupport.dprint('%s' % traceback.print_exc())

    return rc


if __name__ == '__main__':
    sys.exit(main(sys.argv))
