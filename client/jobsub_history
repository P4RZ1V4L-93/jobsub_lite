#!/usr/bin/env python

##########################################################################
# Project:
#   JobSub
#
# Author:
#   Parag Mhashilkar
#
# Description:
#   This module implements the JobSub client tool
#
##########################################################################

import sys
import os
import getopt
import optparse
import argparse
import time
import traceback

import constants
import logSupport
from jobsubClient import JobSubClient
from jobsubClient import JobSubClientError
# from jobsubClient import version_string
from jobsubClient import Version_String
from jobsubClient import  JID_Callback
#from jobsubClient import date_callback
from jobsubClient import Date_Callback 
from defaultServer import defaultServer


def print_opts(options):
    logSupport.dprint('COMMAND LINE OPTIONS:')
    logSupport.dprint('%s' % options)


def required_args_present(options):
    try:
        if options.acctGroup and options.jobsubServer:
            return True
    except AttributeError:
        return False
    return False


def parse_opts(argv):
    usage = '%(prog)s [Client Options]'
#     parser = optparse.OptionParser(usage=usage, TODO
    parser = argparse.ArgumentParser(usage=usage,
                                   # version=version_string(), TODO
                                   conflict_handler="resolve",
                                   epilog="REQUIRED arguments are: --group  .Please direct questions, comments, or problems to the service desk")

    # opt_group = optparse.OptionGroup(parser, "Client Options") TODO
    client_options = parser.add_argument_group("Client Options")

    # Required args
    client_options.add_argument('-G', '--group',
                         dest='acctGroup',
                         type=str,
                         action='store',
                         metavar='<Group/Experiment/Subgroup>',
                         default=os.environ.get('JOBSUB_GROUP'),
                         help='Group/Experiment/Subgroup for priorities and accounting')

    # Optional args
    client_options.add_argument('--jobsub-server',
                         dest='jobsubServer',
                         action='store',
                         metavar='<JobSub Server>',
                         default=defaultServer(),
                         help='Alternate location of JobSub server to use')

    client_options.add_argument('--user',
                         dest='histUser',
                         type=str,
                         action='store',
                         metavar='<uid>',
                         default=None,
                         help='username to look at history of')

    client_options.add_argument('--jobid',
                         dest='jobId',
                         type=str,
                         action=JID_Callback,
                         # callback=jid_callback, TODO
                         metavar='<Job ID>',
                         default=None,
                         help='Job Id (Cluster ID)  to query')

    client_options.add_argument('--qdate-ge',
                         dest='qdate_ge',
                         type=str,
                         action=Date_Callback,
                         # callback=date_callback, TODO
                         metavar='<submission date>',
                         default=None,
                         help="""job submission date (qdate)  greater than or equal to <submission date>
                         Format for <submission date> is 'YYYY-MM-DD' or 'YYYY-MM-DD hh:mm:ss' """)

    client_options.add_argument('--qdate-le',
                         dest='qdate_le',
                         type=str,
                         action=Date_Callback,
                         # callback=date_callback, TODO
                         metavar='<submission date>',
                         default=None,
                         help="""job submission date (qdate)  less than or equal to  <submission date>
                         Format for <submission date> is 'YYYY-MM-DD' or 'YYYY-MM-DD hh:mm:ss' """)

    client_options.add_argument('--debug',
                         dest='debug',
                         action='store_true',
                         default=False,
                         help='Print debug messages including server contacted, http response, response time')

    client_options.add_argument('-h', '--help',
                         dest='help',
                         action='store_true',
                         default=False,
                         help='Show this help message and exit')

    # parser.add_option_group(opt_group) TODO

    if len(argv) < 1:
        print "ERROR: Insufficient arguments specified"
        parser.print_help()
        sys.exit(1)

    options, remainder = parser.parse_known_args(argv)

    if options.help or (len(remainder) > 1):
        parser.print_help()
        sys.exit(0)

    if not required_args_present(options):
        print "ERROR: Missing required arguments"
        print "%s" % parser.epilog
        parser.print_help()
        sys.exit(1)
    return options


def main(argv):
    options = parse_opts(argv)
    logSupport.init_logging(options.debug)
    logSupport.dprint('CLIENT_ARGS: ', vars(options))
    opt_dict = {'debug': options.debug,
                'qdate_ge': options.qdate_ge, 'qdate_le': options.qdate_le}
    js_client = JobSubClient(options.jobsubServer,
                             options.acctGroup, None, [], extra_opts=opt_dict)
    rc = 1
    try:
        rc = js_client.history(options.histUser, options.jobId)
    except JobSubClientError as e:
        print e
        logSupport.dprint(traceback.format_exc())
    except Exception as e:
        print e
        logSupport.dprint('%s' % traceback.print_exc())

    return rc


if __name__ == '__main__':
    sys.exit(main(sys.argv))
